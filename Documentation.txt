Documentation Notes:

--------------------------------------------------
Wiring
--------------------------------------------------
RC -> Arduino
GND -> GND (Black Cable [part of 3-pin connector])
5V -> 5V (Red Cable [part of 3-pin connector])
Servo (1CH) -> Pin D11 (White Cable [part of 3-pin connector])
Motor (2CH) -> Pin D12 (Yellow cable)

Arduino -> Servo
Pind D09 -> Servo Input (Oragne Cable)

Arduino -> Motor
Pin D10 -> ESC (Green Cable)

Power Supply: ESC gets power from Battery and forwards to RC, which in turn forwards to Arduino & Servo via 3-pin connector.

--------------------------------------------------
Serial Communication Protocol
--------------------------------------------------

Message Format: <ControlCode>:<ControlValue>;
Example: 1:1600; (Set Power of 1600 to Motor -> Slow Forward Movement)

Table of Codes and Values:
--------------------------
Control Code        Min Value        Neutral Value        Max Value        Description
0                   0                0                    0                Reset the Controller State -> Sets Motor and Servo back to Neutral. Example: 0:0;
1                   955              1500                 2025             Set Power to MOTOR: < 1500 means Reverse. For Full Power Braking, send 955 while the car is moving forward. This will not damage the suspension. NOTE: DOES NOT WORK WHEN REVERSING. DO NOT TRY EMERGENCY BRAKING WHILE GOING REVERSE OR YOU WILL DAMAGE THE CAR!
2                   900              1500                 2100             Set Steering Angle: Min = Full Left, Max = Full Right


--------------------------------------------------
Input Control
--------------------------------------------------
* Reacts to Control Messages from User with 5Hz (every 200ms)
* Reacts to Remote Control with 50Hz (every 20ms)
* Obeys Input Control Messages over Serial Interface as long as there is no / neutral input signal from RC.
* If RC is used it overrides User Input until RC returns to neutral or RESET command is sent.

--------------------------------------------------
Internal Details
--------------------------------------------------
* Uses Servo Library to generate 50Hz PWM Signal (Arduino's analogWrite generates a 590Hz signal)
* Uses EnableInterrupt Library for PinChangeInterrupts on RC Input Pins to decode the PWM Signal
* Currently NO input validation -> You can crash it by sending malformed command messages
* Basic Logging to Serial Channel. Configured in setup() method in main .ino file. Set Log Level as Desired. Possible Values: CRITICAL, ERROR, WARNING, INFO, DEBUG, TRACE.
    * NOTE: Only use DEBUG and TRACE if you are trying to find an error. Sending many messages over Serial greatly impacts performance and stability!

--------------------------------------------------
Limitations / TODO
--------------------------------------------------
* 8-bit PWM Signal (low resolution)
* Hall Sensors
* Ultrasonic
* RaspberryPi Interface

--------------------------------------------------
Tips and Tricks
--------------------------------------------------
* Many librarys are bad implementations and cause lots of trouble. Do reasearch on libraries before using them and include as few as possible
* Think about architecture before starting to code. Remember to design your code to be easily maintainable and extensible
* Don't let tasks in loops run more often then necessary. Example: RC Input is a 50Hz PWM signal. Running the RC input task more than 20 times per second does not bring any extra performance, but costs ressources
* Serial Communication is very expensive. If you are sending a lot of debug messages, you might be causing the problem in the first place
* When implementing a new feature, write an extra sketch with a minimal implementation of only that feature first
* This arduino model used in the car allows only ONE interrupt on a PIN at the same time. Subsequent interrupt attachments will overwrite the previous ones
* If the battery is almost empty (or some device doesn't receive enough power for any reason), very strange things start to happen...